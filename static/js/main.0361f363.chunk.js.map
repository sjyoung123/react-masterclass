{"version":3,"sources":["api.ts","Routes/Chart.tsx","Routes/Price.tsx","Routes/Coin.tsx","Routes/Coins.tsx","Router.tsx","theme.ts","App.tsx","index.tsx"],"names":["BASE_URL","CoinsFetcher","a","fetch","json","coinId","CoinPriceFetcher","endDate","Math","floor","Date","now","startDate","Chart","useQuery","CoinChartFetcher","refetchInterval","isLoading","data","type","series","name","map","price","x","time_close","y","open","toFixed","high","low","close","options","theme","mode","plotOptions","candlestick","colors","upward","downward","chart","width","height","background","toolbar","show","xaxis","yaxis","Container","styled","div","PriceContainer","Tag","span","Text","props","isPositive","accentColor","Price","checkPositive","value","quotes","USD","percent_change_1h","percent_change_12h","percent_change_24h","percent_change_30d","Title","h1","Loader","Header","header","OverView","OverViewItem","Description","p","Taps","Tap","isActive","textColor","Coin","isDark","useParams","state","useLocation","navigate","useNavigate","chartMatch","useMatch","priceMatch","CoinInfoFetcher","infoLoading","infoData","priceLoading","priceData","loading","Helmet","icon","faHome","onClick","src","symbol","toLowerCase","alt","rank","description","total_supply","max_supply","to","path","element","CoinListContainer","CoinList","ul","li","bgColor","Img","img","Coins","slice","coin","id","Router","basename","process","light","GlobalCss","createGlobalStyle","ToggleContainer","App","useState","isDarkMode","setIsDarkMode","onChange","size","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.0361f363.chunk.js","sourcesContent":["const BASE_URL = \"https://api.coinpaprika.com/v1\";\r\n\r\nexport async function CoinsFetcher() {\r\n  return await (await fetch(`${BASE_URL}/coins`)).json();\r\n}\r\n\r\nexport async function CoinInfoFetcher(coinId: string) {\r\n  return await (await fetch(`${BASE_URL}/coins/${coinId}`)).json();\r\n}\r\n\r\nexport async function CoinPriceFetcher(coinId: string) {\r\n  return await (await fetch(`${BASE_URL}/tickers/${coinId}`)).json();\r\n}\r\n\r\nexport async function CoinChartFetcher(coinId: string) {\r\n  const endDate = Math.floor(Date.now() / 1000);\r\n  const startDate = endDate - 60 * 60 * 24 * 14;\r\n  return await (\r\n    await fetch(\r\n      `${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\r\n    )\r\n  ).json();\r\n}\r\n","import { useQuery } from \"react-query\";\r\nimport { CoinChartFetcher } from \"../api\";\r\nimport ApexChart from \"react-apexcharts\";\r\n\r\ninterface IHistory {\r\n  time_open: string;\r\n  time_close: string;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume: number;\r\n  market_cap: number;\r\n}\r\n\r\ninterface ICoinId {\r\n  coinId: string;\r\n}\r\n\r\nfunction Chart({ coinId }: ICoinId) {\r\n  const { isLoading, data } = useQuery<IHistory[]>(\r\n    [\"ohlcv\", coinId],\r\n    () => CoinChartFetcher(coinId),\r\n    { refetchInterval: 10000 }\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        {isLoading ? (\r\n          \"Loading chart...\"\r\n        ) : (\r\n          // <ApexChart\r\n          //   type=\"line\"\r\n          //   series={[\r\n          //     {\r\n          //       name: coinId,\r\n          //       data: data?.map((price) => price.close),\r\n          //     },\r\n          //   ]}\r\n          //   options={{\r\n          //     theme: {\r\n          //       mode: \"dark\",\r\n          //     },\r\n          //     chart: {\r\n          //       height: 300,\r\n          //       width: 500,\r\n          //       toolbar: {\r\n          //         show: false,\r\n          //       },\r\n          //       background: \"transparent\",\r\n          //     },\r\n          //     grid: { show: false },\r\n          //     stroke: {\r\n          //       curve: \"smooth\",\r\n          //       width: 4,\r\n          //     },\r\n          //     yaxis: {\r\n          //       show: false,\r\n          //     },\r\n          //     xaxis: {\r\n          //       axisBorder: { show: false },\r\n          //       axisTicks: { show: false },\r\n          //       labels: { show: false },\r\n          //       type: \"datetime\",\r\n          //       categories: data?.map((price) => price.time_close),\r\n          //     },\r\n          //     fill: {\r\n          //       type: \"gradient\",\r\n          //       gradient: { gradientToColors: [\"#0be881\"], stops: [0, 100] },\r\n          //     },\r\n          //     colors: [\"#0fbcf9\"],\r\n          //     tooltip: {\r\n          //       y: {\r\n          //         formatter: (value) => `$${value.toFixed(2)}`,\r\n          //       },\r\n          //     },\r\n          //   }}\r\n          // />\r\n          <ApexChart\r\n            type=\"candlestick\"\r\n            series={[\r\n              {\r\n                name: coinId,\r\n                data: data?.map((price) => {\r\n                  return {\r\n                    x: new Date(price.time_close),\r\n                    y: [\r\n                      price.open.toFixed(2),\r\n                      price.high.toFixed(2),\r\n                      price.low.toFixed(2),\r\n                      price.close.toFixed(2),\r\n                    ],\r\n                  };\r\n                }),\r\n              },\r\n            ]}\r\n            options={{\r\n              theme: {\r\n                mode: \"dark\",\r\n              },\r\n              plotOptions: {\r\n                candlestick: {\r\n                  colors: {\r\n                    upward: \"#3C90EB\",\r\n                    downward: \"#DF7D46\",\r\n                  },\r\n                },\r\n              },\r\n              chart: {\r\n                width: 700,\r\n                height: \"500px\",\r\n                background: \"transparent\",\r\n                toolbar: {\r\n                  show: false,\r\n                },\r\n              },\r\n              xaxis: {\r\n                type: \"datetime\",\r\n              },\r\n              yaxis: {\r\n                show: false,\r\n              },\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","import { useQuery } from \"react-query\";\r\nimport styled from \"styled-components\";\r\nimport { CoinPriceFetcher } from \"../api\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst PriceContainer = styled.div`\r\n  padding: 15px 0;\r\n`;\r\n\r\nconst Tag = styled.span``;\r\n\r\nconst Text = styled.span<{ isPositive?: Boolean }>`\r\n  color: ${(props) => (props.isPositive ? props.theme.accentColor : \"tomato\")};\r\n`;\r\n\r\ninterface ICoinId {\r\n  coinId: string;\r\n}\r\ninterface IPriceDetail {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  circulating_supply: number;\r\n  total_supply: number;\r\n  max_supply: number;\r\n  beta_value: number;\r\n  first_data_at: string;\r\n  last_updated: string;\r\n  quotes: {\r\n    USD: {\r\n      ath_date: string;\r\n      ath_price: number;\r\n      market_cap: number;\r\n      percent_change_1h: number;\r\n      percent_change_1y: number;\r\n      percent_change_6h: number;\r\n      percent_change_7d: number;\r\n      percent_change_12h: number;\r\n      percent_change_15m: number;\r\n      percent_change_24h: number;\r\n      percent_change_30d: number;\r\n      percent_change_30m: number;\r\n      percent_from_price_ath: number;\r\n      price: number;\r\n      volume_24h: number;\r\n      volume_24h_change_24h: number;\r\n    };\r\n  };\r\n}\r\n\r\nfunction Price({ coinId }: ICoinId) {\r\n  const { isLoading, data } = useQuery<IPriceDetail>(\r\n    [\"priceDetail\", coinId],\r\n    () => CoinPriceFetcher(coinId),\r\n    { refetchInterval: 10000 }\r\n  );\r\n\r\n  function checkPositive(value: number | undefined) {\r\n    if (value) {\r\n      return value > 0;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        \"Loading...\"\r\n      ) : (\r\n        <>\r\n          <Container>\r\n            <PriceContainer>\r\n              <Tag>Price: </Tag>\r\n              <Text isPositive={true}>\r\n                ${data?.quotes.USD.price.toFixed(2)}\r\n              </Text>\r\n            </PriceContainer>\r\n            <PriceContainer>\r\n              <Tag>Change rate(1h): </Tag>\r\n              <Text\r\n                isPositive={\r\n                  checkPositive(data?.quotes.USD.percent_change_1h) === true\r\n                }\r\n              >\r\n                {data?.quotes.USD.percent_change_1h}%\r\n              </Text>\r\n            </PriceContainer>\r\n            <PriceContainer>\r\n              <Tag>Change rate(12h): </Tag>\r\n              <Text\r\n                isPositive={\r\n                  checkPositive(data?.quotes.USD.percent_change_12h) === true\r\n                }\r\n              >\r\n                {data?.quotes.USD.percent_change_12h}%\r\n              </Text>\r\n            </PriceContainer>\r\n            <PriceContainer>\r\n              <Tag>Change rate(24h): </Tag>\r\n              <Text\r\n                isPositive={\r\n                  checkPositive(data?.quotes.USD.percent_change_24h) === true\r\n                }\r\n              >\r\n                {data?.quotes.USD.percent_change_24h}%\r\n              </Text>\r\n            </PriceContainer>\r\n            <PriceContainer>\r\n              <Tag>Change rate(30d): </Tag>\r\n              <Text\r\n                isPositive={\r\n                  checkPositive(data?.quotes.USD.percent_change_30d) === true\r\n                }\r\n              >\r\n                {data?.quotes.USD.percent_change_30d}%\r\n              </Text>\r\n            </PriceContainer>\r\n          </Container>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Price;\r\n","import { faHome } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { useQuery } from \"react-query\";\r\nimport {\r\n  Route,\r\n  Routes,\r\n  useLocation,\r\n  useMatch,\r\n  useNavigate,\r\n  useParams,\r\n} from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { CoinInfoFetcher, CoinPriceFetcher } from \"../api\";\r\nimport Chart from \"./Chart\";\r\nimport Price from \"./Price\";\r\n\r\nconst Container = styled.div`\r\n  padding: 0 20px;\r\n  max-width: 480px;\r\n  margin: 0 auto;\r\n`;\r\nconst Title = styled.h1`\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 48px;\r\n  color: ${(props) => props.theme.accentColor};\r\n  img {\r\n    width: 40px;\r\n    height: 40px;\r\n    margin-left: 10px;\r\n  }\r\n  svg {\r\n    width: 40px;\r\n    height: 40px;\r\n    &:hover {\r\n      cursor: pointer;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Loader = styled.span`\r\n  display: block;\r\n  text-align: center;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  height: 15vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst OverView = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  padding: 10px 20px;\r\n  border-radius: 10px;\r\n  margin-bottom: 30px;\r\n  div {\r\n    margin: 5px 0;\r\n  }\r\n`;\r\n\r\nconst OverViewItem = styled.div`\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Description = styled.p`\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nconst Taps = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\ninterface ITap {\r\n  isActive: boolean;\r\n}\r\n\r\nconst Tap = styled.div<ITap>`\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  width: 45%;\r\n  color: ${(props) =>\r\n    props.isActive ? props.theme.accentColor : props.theme.textColor};\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 10px;\r\n  a {\r\n    width: 100%;\r\n    padding: 10px 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\ninterface IParams {\r\n  coinId: string;\r\n}\r\n\r\ninterface ILocation {\r\n  state: {\r\n    name: string;\r\n  };\r\n}\r\n\r\ninterface IInfoData {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  is_new: boolean;\r\n  is_active: boolean;\r\n  type: string;\r\n  description: string;\r\n  message: string;\r\n  open_source: boolean;\r\n  started_at: string;\r\n  development_status: string;\r\n  hardware_wallet: boolean;\r\n  proof_type: string;\r\n  org_structure: string;\r\n  hash_algorithm: string;\r\n  first_data_at: string;\r\n  last_data_at: string;\r\n}\r\n\r\ninterface IPriceData {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  circulating_supply: number;\r\n  total_supply: number;\r\n  max_supply: number;\r\n  beta_value: number;\r\n  first_data_at: string;\r\n  last_updated: string;\r\n  quotes: {\r\n    USD: {\r\n      ath_date: string;\r\n      ath_price: number;\r\n      market_cap: number;\r\n      percent_change_1h: number;\r\n      percent_change_1y: number;\r\n      percent_change_6h: number;\r\n      percent_change_7d: number;\r\n      percent_change_12h: number;\r\n      percent_change_15m: number;\r\n      percent_change_24h: number;\r\n      percent_change_30d: number;\r\n      percent_change_30m: number;\r\n      percent_from_price_ath: number;\r\n      price: number;\r\n      volume_24h: number;\r\n      volume_24h_change_24h: number;\r\n    };\r\n  };\r\n}\r\ninterface IIsDark {\r\n  isDark: boolean;\r\n}\r\n\r\nfunction Coin({ isDark }: IIsDark) {\r\n  const { coinId } = useParams() as IParams;\r\n  const { state } = useLocation() as ILocation;\r\n\r\n  let navigate = useNavigate();\r\n\r\n  const chartMatch = useMatch(\"/:id/chart\");\r\n  const priceMatch = useMatch(\"/:id/price\");\r\n\r\n  const { isLoading: infoLoading, data: infoData } = useQuery<IInfoData>(\r\n    [\"info\", coinId],\r\n    () => CoinInfoFetcher(coinId)\r\n  );\r\n  const { isLoading: priceLoading, data: priceData } = useQuery<IPriceData>(\r\n    [\"price\", coinId],\r\n    () => CoinPriceFetcher(coinId),\r\n    { refetchInterval: 10000 }\r\n  );\r\n\r\n  const loading = infoLoading || priceLoading;\r\n\r\n  const onClick = () => {\r\n    navigate(\"/\");\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Helmet>\r\n        <title>\r\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\r\n        </title>\r\n      </Helmet>\r\n      <Header>\r\n        <Title>\r\n          <FontAwesomeIcon icon={faHome} onClick={onClick} />\r\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\r\n          <img\r\n            src={`https://cryptoicon-api.vercel.app/api/icon/${infoData?.symbol.toLowerCase()}`}\r\n            alt=\"coin symbol\"\r\n          />\r\n        </Title>\r\n      </Header>\r\n      {loading ? (\r\n        <Loader>Loading...</Loader>\r\n      ) : (\r\n        <>\r\n          <OverView>\r\n            <OverViewItem>\r\n              <span>Rank: {infoData?.rank}</span>\r\n            </OverViewItem>\r\n            <OverViewItem>\r\n              <span>Symbol: {infoData?.symbol}</span>\r\n            </OverViewItem>\r\n            <OverViewItem>\r\n              <span>Price: ${priceData?.quotes.USD.price.toFixed(2)}</span>\r\n            </OverViewItem>\r\n          </OverView>\r\n          <Description>{infoData?.description}</Description>\r\n\r\n          <OverView>\r\n            <OverViewItem>\r\n              <div>Total Supply: {priceData?.total_supply}</div>\r\n              <div>Max Supply: {priceData?.max_supply}</div>\r\n            </OverViewItem>\r\n          </OverView>\r\n\r\n          <Taps>\r\n            <Tap isActive={chartMatch !== null}>\r\n              <Link to=\"chart\">Chart</Link>\r\n            </Tap>\r\n            <Tap isActive={priceMatch !== null}>\r\n              <Link to=\"price\">Price</Link>\r\n            </Tap>\r\n          </Taps>\r\n\r\n          <Routes>\r\n            <Route path=\"price\" element={<Price coinId={coinId} />} />\r\n            <Route path=\"chart\" element={<Chart coinId={coinId} />} />\r\n          </Routes>\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\nexport default Coin;\r\n","import { useQuery } from \"react-query\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { CoinsFetcher } from \"../api\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst Container = styled.div`\r\n  padding: 0 20px;\r\n  max-width: 480px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Loader = styled.span`\r\n  display: block;\r\n  text-align: center;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  height: 15vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst CoinListContainer = styled.div`\r\n  height: 80vh;\r\n  overflow-y: scroll;\r\n`;\r\n\r\nconst CoinList = styled.ul``;\r\n\r\nconst Coin = styled.li`\r\n  background-color: ${(props) => props.theme.textColor};\r\n  color: ${(props) => props.theme.bgColor};\r\n  margin-bottom: 10px;\r\n  border-radius: 15px;\r\n  a {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 20px;\r\n    transition: color 0.2s ease-in-out;\r\n  }\r\n  &:hover {\r\n    a {\r\n      color: ${(props) => props.theme.accentColor};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Img = styled.img`\r\n  height: 35px;\r\n  width: 35px;\r\n  margin-right: 15px;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 48px;\r\n  color: ${(props) => props.theme.accentColor};\r\n`;\r\n\r\ninterface ICoins {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  is_new: boolean;\r\n  is_active: boolean;\r\n  type: string;\r\n}\r\ninterface IIsDark {\r\n  isDark: boolean;\r\n}\r\n\r\nfunction Coins({ isDark }: IIsDark) {\r\n  const { isLoading, data } = useQuery<ICoins[]>(\"allCoins\", CoinsFetcher);\r\n\r\n  return (\r\n    <Container>\r\n      <Helmet>\r\n        <title>Coins</title>\r\n      </Helmet>\r\n      <Header>\r\n        <Title>Coins</Title>\r\n      </Header>\r\n      {isLoading ? (\r\n        <Loader>Loading...</Loader>\r\n      ) : (\r\n        <CoinListContainer>\r\n          <CoinList>\r\n            {data?.slice(0, 100).map((coin) => (\r\n              <Coin key={coin.id}>\r\n                <Link to={`/${coin.id}`} state={{ name: coin.name }}>\r\n                  <Img\r\n                    src={`https://cryptoicon-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}\r\n                  />\r\n                  {coin.name} &rarr;\r\n                </Link>\r\n              </Coin>\r\n            ))}\r\n          </CoinList>\r\n        </CoinListContainer>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\nexport default Coins;\r\n","import { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\nimport Coin from \"./Routes/Coin\";\r\nimport Coins from \"./Routes/Coins\";\r\n\r\ninterface IIsDark {\r\n  isDark: boolean;\r\n}\r\n\r\nfunction Router({ isDark }: IIsDark) {\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <Routes>\r\n        <Route path=\"/\" element={<Coins isDark={isDark} />} />\r\n        <Route path=\"/:coinId/*\" element={<Coin isDark={isDark} />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\nexport default Router;\r\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const theme: DefaultTheme = {\r\n  bgColor: \"#2f3640\",\r\n  textColor: \"#f5f6fa\",\r\n  accentColor: \"#44bd32\",\r\n};\r\n\r\nexport const light: DefaultTheme = {\r\n  bgColor: \"#f5f6fa\",\r\n  textColor: \"#2f3640\",\r\n  accentColor: \"#44bd32\",\r\n};\r\n","import styled, { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport Router from \"./Router\";\n// import { ReactQueryDevtools } from \"react-query/devtools\";\nimport { DarkModeToggle } from \"react-dark-mode-toggle-2\";\nimport { useState } from \"react\";\nimport { light, theme } from \"./theme\";\n\nconst GlobalCss = createGlobalStyle`\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n*{\n  box-sizing:border-box;\n}\nbody{\n  font-family: 'Fuzzy Bubbles', cursive;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  padding: 20px 30px;\n}\na{\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nconst ToggleContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: flex-end;\n`;\n\nfunction App() {\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  return (\n    <>\n      <ToggleContainer>\n        <DarkModeToggle\n          isDarkMode={isDarkMode}\n          onChange={setIsDarkMode}\n          size={85}\n        />\n      </ToggleContainer>\n      <ThemeProvider theme={isDarkMode ? theme : light}>\n        <GlobalCss />\n        <Router isDark={isDarkMode} />\n        {/* <ReactQueryDevtools /> */}\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport App from \"./App\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}